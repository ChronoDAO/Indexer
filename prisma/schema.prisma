// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Player {
  id        Int    @id @default(autoincrement())
  name      String @unique
  nfts      NFT[]
  sales     Sale[] @relation("fromPlayer")
  purchases Sale[] @relation("toPlayer")
  drops     Drop[] @relation("toPlayer")
  spent     Float  @default(0)
  sold      Float  @default(0)
  balance   Float  @default(0)
}

model NFT {
  id          Int       @id @default(autoincrement())
  composedId  String    @unique
  issuedId    Int
  owner       Player?   @relation(fields: [ownerName], references: [name])
  ownerName   String?
  item        Item?     @relation(fields: [archetypeId], references: [archetypeId])
  archetypeId String?
  sales       Sale[]
  drops       Drop[]
}

model Item {
  archetypeId    String      @id @unique
  name           String      @unique
  description    String?
  imageUrl       String?
  floorPrice     Float?
  maxIssuance    Int
  nfts           NFT[]
  tags           Tag[]
  rarity         Rarity?     @relation(fields: [rarityName], references: [name])
  rarityName     String?
  collection     Collection? @relation(fields: [collectionName], references: [name])
  collectionName String?
  optionName     String
  totalTransfers Int
  lastApiPull    DateTime?
  lastSync       DateTime?
  synced         Boolean
}

model Tag {
  name  String @id @unique
  items Item[]
}

model Rarity {
  name  String @unique
  items Item[]
}

model Collection {
  name  String @unique
  items Item[]
}

model Sale {
  id            Int      @id @default(autoincrement())
  transactionId String   @unique
  price         Float    @default(0)
  date          DateTime
  from          Player   @relation(fields: [fromPlayer], references: [name], name: "fromPlayer")
  fromPlayer    String
  to            Player   @relation(fields: [toPlayer], references: [name], name: "toPlayer")
  toPlayer      String
  nft           NFT      @relation(fields: [nftId], references: [composedId])
  nftId         String
}

model Drop {
  id         Int      @id @default(autoincrement())
  date       DateTime
  to         Player   @relation(fields: [toPlayer], references: [name], name: "toPlayer")
  toPlayer   String
  nft        NFT?     @relation(fields: [composedId], references: [composedId])
  composedId String?
}
